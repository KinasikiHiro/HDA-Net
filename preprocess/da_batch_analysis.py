"""
da_batch_analysis.py
--------------------
Purpose:
    Perform **batch domain analysis** between two subsets of LiTS CT data
    representing different acquisition settings (e.g., settingA vs. settingB).

    This analysis provides insight into the domain gap between CT subsets,
    such as differences in intensity distribution and texture patterns.

Directory Structure:
    HDA-Net/
      ├── data/
      ├── preprocessed/
      │    ├── settingA/     # Source-like CT subset
      │    └── settingB/     # Target-like CT subset
      ├── preprocess/
      │    └── da_batch_analysis.py
      ├── utils/
           └── da_analysis.py  # contains analyze_pair()

Usage:
    Run this script after preprocessing:
        python da_batch_analysis.py

Output:
    - results/da_analysis/domain_gap_summary.csv
    - results/da_analysis/plots/ (generated by analyze_pair)
"""

import os
import sys
import glob
import pandas as pd

# ---------------------------------------
# 1. Fix Python import path for utils/
# ---------------------------------------
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))             # HDA-Net/preprocess
ROOT_DIR = os.path.abspath(os.path.join(CURRENT_DIR, '..'))          # HDA-Net/
UTILS_DIR = os.path.join(ROOT_DIR, 'utils')
if UTILS_DIR not in sys.path:
    sys.path.append(UTILS_DIR)

from da_analysis import analyze_pair  # import the helper function from utils/

# ---------------------------------------
# 2. Path Settings
# ---------------------------------------
PREPROCESSED_DIR = os.path.join(ROOT_DIR, 'preprocessed')
SRC_DIR = os.path.join(PREPROCESSED_DIR, 'train')  # source-like CT subset
TGT_DIR = os.path.join(PREPROCESSED_DIR, 'test')  # target-like CT subset

OUT_DIR = os.path.join(ROOT_DIR, 'results', 'da_analysis')
os.makedirs(OUT_DIR, exist_ok=True)

# ---------------------------------------
# 3. Collect Files
# ---------------------------------------
caseNum = 10
src_cases = sorted(glob.glob(os.path.join(SRC_DIR, '*.h5')))[:caseNum]
tgt_cases = sorted(glob.glob(os.path.join(TGT_DIR, '*.h5')))[:caseNum]

if not src_cases or not tgt_cases:
    raise FileNotFoundError(
        f"No files found in either {SRC_DIR} or {TGT_DIR}. "
        "Please check that preprocessing has been completed successfully."
    )

# ---------------------------------------
# 4. Run Batch Domain Analysis
# ---------------------------------------
records = []

for s_path, t_path in zip(src_cases, tgt_cases):
    case_id = os.path.basename(s_path).replace('.h5', '')
    print(f"[INFO] Analyzing case: {case_id}")
    try:
        stats = analyze_pair(s_path, t_path, out_dir=OUT_DIR)
        stats['case_id'] = case_id
        records.append(stats)
    except Exception as e:
        print(f"[WARNING] Skipped {case_id}: {e}")

# ---------------------------------------
# 5. Save Summary
# ---------------------------------------
if records:
    df = pd.DataFrame(records)
    summary_path = os.path.join(OUT_DIR, 'domain_gap_summary.csv')
    df.to_csv(summary_path, index=False)
    print(f"[DONE] Domain analysis completed. Results saved to: {summary_path}")
else:
    print("[INFO] No analysis results were generated.")
